use std::borrow::Borrow;

#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum HeaderKey {
    AIM,
    Accept,
    AcceptCharset,
    AcceptDatetime,
    AcceptEncoding,
    AcceptLanguage,
    AccessControlRequestMethod,
    AccessControlRequestHeaders,
    Authorization,
    CacheControl,
    Connection,
    ContentEncoding,
    ContentLength,
    ContentMD5,
    ContentType,
    Cookie,
    Date,
    Expect,
    Forwarded,
    From,
    Host,
    HTTP2Settings,
    IfMatch,
    IfModifiedSince,
    IfNoneMatch,
    IfRange,
    IfUnmodifiedSince,
    MaxForwards,
    Origin,
    Pragma,
    Prefer,
    ProxyAuthorization,
    Range,
    Referer,
    TE,
    Trailer,
    TransferEncoding,
    UserAgent,
    Upgrade,
    Via,
    Warning,
    AcceptCH,
    AccessControlAllowOrigin,
    AccessControlAllowCredentials,
    AccessControlExposeHeaders,
    AccessControlMaxAge,
    AccessControlAllowMethods,
    AccessControlAllowHeaders,
    AcceptPatch,
    AcceptRanges,
    Age,
    Allow,
    AltSvc,
    ContentDisposition,
    ContentLanguage,
    ContentLocation,
    ContentRange,
    DeltaBase,
    ETag,
    Expires,
    IM,
    LastModified,
    Link,
    Location,
    P3P,
    PreferenceApplied,
    ProxyAuthenticate,
    PublicKeyPins,
    RetryAfter,
    Server,
    SetCookie,
    StrictTransportSecurity,
    Tk,
    Vary,
    WWWAuthenticate,
    Custom(String),
}

impl From<&str> for HeaderKey {
    fn from(s: &str) -> Self {
        match s.to_lowercase().as_str() {
            "a-im" => Self::AIM,
            "accept" => Self::Accept,
            "accept-charset" => Self::AcceptCharset,
            "accept-datetime" => Self::AcceptDatetime,
            "accept-encoding" => Self::AcceptEncoding,
            "accept-language" => Self::AcceptLanguage,
            "access-control-request-method" => Self::AccessControlRequestMethod,
            "access-control-request-headers" => Self::AccessControlRequestHeaders,
            "authorization" => Self::Authorization,
            "cache-control" => Self::CacheControl,
            "connection" => Self::Connection,
            "content-encoding" => Self::ContentEncoding,
            "content-length" => Self::ContentLength,
            "content-md5" => Self::ContentMD5,
            "content-type" => Self::ContentType,
            "cookie" => Self::Cookie,
            "date" => Self::Date,
            "expect" => Self::Expect,
            "forwarded" => Self::Forwarded,
            "from" => Self::From,
            "host" => Self::Host,
            "http2-settings" => Self::HTTP2Settings,
            "if-match" => Self::IfMatch,
            "if-modified-since" => Self::IfModifiedSince,
            "if-none-match" => Self::IfNoneMatch,
            "if-range" => Self::IfRange,
            "if-unmodified-since" => Self::IfUnmodifiedSince,
            "max-forwards" => Self::MaxForwards,
            "origin" => Self::Origin,
            "pragma" => Self::Pragma,
            "prefer" => Self::Prefer,
            "proxy-authorization" => Self::ProxyAuthorization,
            "range" => Self::Range,
            "referer" => Self::Referer,
            "te" => Self::TE,
            "trailer" => Self::Trailer,
            "transfer-encoding" => Self::TransferEncoding,
            "user-agent" => Self::UserAgent,
            "upgrade" => Self::Upgrade,
            "via" => Self::Via,
            "warning" => Self::Warning,
            "accept-ch" => Self::AcceptCH,
            "access-control-allow-origin" => Self::AccessControlAllowOrigin,
            "access-control-allow-credentials" => Self::AccessControlAllowCredentials,
            "access-control-expose-headers" => Self::AccessControlExposeHeaders,
            "access-control-max-age" => Self::AccessControlMaxAge,
            "access-control-allow-methods" => Self::AccessControlAllowMethods,
            "access-control-allow-headers" => Self::AccessControlAllowHeaders,
            "accept-patch" => Self::AcceptPatch,
            "accept-ranges" => Self::AcceptRanges,
            "age" => Self::Age,
            "allow" => Self::Allow,
            "alt-svc" => Self::AltSvc,
            "content-disposition" => Self::ContentDisposition,
            "content-language" => Self::ContentLanguage,
            "content-location" => Self::ContentLocation,
            "content-range" => Self::ContentRange,
            "delta-base" => Self::DeltaBase,
            "etag" => Self::ETag,
            "expires" => Self::Expires,
            "im" => Self::IM,
            "last-modified" => Self::LastModified,
            "link" => Self::Link,
            "location" => Self::Location,
            "p3p" => Self::P3P,
            "preference-applied" => Self::PreferenceApplied,
            "proxy-authenticate" => Self::ProxyAuthenticate,
            "public-key-pins" => Self::PublicKeyPins,
            "retry-after" => Self::RetryAfter,
            "server" => Self::Server,
            "set-cookie" => Self::SetCookie,
            "strict-transport-security" => Self::StrictTransportSecurity,
            "tk" => Self::Tk,
            "vary" => Self::Vary,
            "www-authenticate" => Self::WWWAuthenticate,
            _ => Self::Custom(s.to_string()),
        }
    }
}

impl From<&HeaderKey> for String {
    fn from(t: &HeaderKey) -> Self {
        match t {
            HeaderKey::AIM => "A-IM",
            HeaderKey::Accept => "Accept",
            HeaderKey::AcceptCharset => "Accept-Charset",
            HeaderKey::AcceptDatetime => "Accept-Datetime",
            HeaderKey::AcceptEncoding => "Accept-Encoding",
            HeaderKey::AcceptLanguage => "Accept-Language",
            HeaderKey::AccessControlRequestMethod => "Access-Control-Request-Method",
            HeaderKey::AccessControlRequestHeaders => "Access-Control-Request-Headers",
            HeaderKey::Authorization => "Authorization",
            HeaderKey::CacheControl => "Cache-Control",
            HeaderKey::Connection => "Connection",
            HeaderKey::ContentEncoding => "Content-Encoding",
            HeaderKey::ContentLength => "Content-Length",
            HeaderKey::ContentMD5 => "Content-MD5",
            HeaderKey::ContentType => "Content-Type",
            HeaderKey::Cookie => "Cookie",
            HeaderKey::Date => "Date",
            HeaderKey::Expect => "Expect",
            HeaderKey::Forwarded => "Forwarded",
            HeaderKey::From => "From",
            HeaderKey::Host => "Host",
            HeaderKey::HTTP2Settings => "HTTP2-Settings",
            HeaderKey::IfMatch => "If-Match",
            HeaderKey::IfModifiedSince => "If-Modified-Since",
            HeaderKey::IfNoneMatch => "If-None-Match",
            HeaderKey::IfRange => "If-Range",
            HeaderKey::IfUnmodifiedSince => "If-Unmodified-Since",
            HeaderKey::MaxForwards => "Max-Forwards",
            HeaderKey::Origin => "Origin",
            HeaderKey::Pragma => "Pragma",
            HeaderKey::Prefer => "Prefer",
            HeaderKey::ProxyAuthorization => "Proxy-Authorization",
            HeaderKey::Range => "Range",
            HeaderKey::Referer => "Referer",
            HeaderKey::TE => "TE",
            HeaderKey::Trailer => "Trailer",
            HeaderKey::TransferEncoding => "Transfer-Encoding",
            HeaderKey::UserAgent => "User-Agent",
            HeaderKey::Upgrade => "Upgrade",
            HeaderKey::Via => "Via",
            HeaderKey::Warning => "Warning",
            HeaderKey::AcceptCH => "Accept-CH",
            HeaderKey::AccessControlAllowOrigin => "Access-Control-Allow-Origin",
            HeaderKey::AccessControlAllowCredentials => "Access-Control-Allow-Credentials",
            HeaderKey::AccessControlExposeHeaders => "Access-Control-Expose-Headers",
            HeaderKey::AccessControlMaxAge => "Access-Control-Max-Age",
            HeaderKey::AccessControlAllowMethods => "Access-Control-Allow-Methods",
            HeaderKey::AccessControlAllowHeaders => "Access-Control-Allow-Headers",
            HeaderKey::AcceptPatch => "Accept-Patch",
            HeaderKey::AcceptRanges => "Accept-Ranges",
            HeaderKey::Age => "Age",
            HeaderKey::Allow => "Allow",
            HeaderKey::AltSvc => "Alt-Svc",
            HeaderKey::ContentDisposition => "Content-Disposition",
            HeaderKey::ContentLanguage => "Content-Language",
            HeaderKey::ContentLocation => "Content-Location",
            HeaderKey::ContentRange => "Content-Range",
            HeaderKey::DeltaBase => "Delta-Base",
            HeaderKey::ETag => "ETag",
            HeaderKey::Expires => "Expires",
            HeaderKey::IM => "IM",
            HeaderKey::LastModified => "Last-Modified",
            HeaderKey::Link => "Link",
            HeaderKey::Location => "Location",
            HeaderKey::P3P => "P3P",
            HeaderKey::PreferenceApplied => "Preference-Applied",
            HeaderKey::ProxyAuthenticate => "Proxy-Authenticate",
            HeaderKey::PublicKeyPins => "Public-Key-Pins",
            HeaderKey::RetryAfter => "Retry-After",
            HeaderKey::Server => "Server",
            HeaderKey::SetCookie => "Set-Cookie",
            HeaderKey::StrictTransportSecurity => "Strict-Transport-Security",
            HeaderKey::Tk => "Tk",
            HeaderKey::Vary => "Vary",
            HeaderKey::WWWAuthenticate => "WWW-Authenticate",
            HeaderKey::Custom(s) => s.as_str(),
        }
        .to_string()
    }
}

impl ToString for HeaderKey {
    fn to_string(&self) -> String {
        self.into()
    }
}
